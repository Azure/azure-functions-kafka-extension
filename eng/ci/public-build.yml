variables:
  Codeql.Enabled: true

# Enable PR validation on branches master and dev
pr:
  branches:
    include:
      - master
      - dev

trigger:
  batch: true
  branches:
    include:
      - dev
      - master
      
schedules:
  - cron: '0 12 * * 0'
    displayName: Weekly Sunday build
    branches:
      include:
        - master
    always: true

resources:
  repositories:
  - repository: 1es
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  template: v1/1ES.Unofficial.PipelineTemplate.yml@1es
  parameters:
    pool:
      name: 1es-pool-azfunc-public
      image: 1es-ubuntu-22.04
      os: linux
    sdl:
      sourceAnalysisPool:
        name: 1es-pool-azfunc-public
        image: 1es-windows-2022
        os: windows
      codeql:
        compiled:
          enabled: true
        runSourceLanguagesInSourceAnalysis: true

    stages:
    - stage: Build
      jobs:
      - job: buildExtension
        templateContext:
          outputs:
          - output: pipelineArtifact
            targetPath: $(Build.ArtifactStagingDirectory)
            artifactName: drop
        steps:
          - task: UseDotNet@2
            displayName: 'Install .NET Core SDK'
            inputs:
              version: 3.1.x
              packageType: sdk
          
          - task: UseDotNet@2
            displayName: 'Install .NET 6.0'
            inputs:
              version: 6.x
              packageType: sdk
          
          - task: UseDotNet@2
            displayName: 'Install .NET 8.0'
            inputs:
              version: 8.x
              packageType: sdk

          - task: DotNetCoreCLI@2
            displayName: Build project
            inputs:
              command: 'build'
              arguments: '--configuration Release -p:IsLocalBuild=False'
              projects: src/Microsoft.Azure.WebJobs.Extensions.Kafka/Microsoft.Azure.WebJobs.Extensions.Kafka.csproj

          - task: DotNetCoreCLI@2
            displayName: Build test projects
            inputs:
              command: 'build'
              arguments: '--configuration Release -p:IsLocalBuild=False'
              projects: |
                test/Microsoft.Azure.WebJobs.Extensions.Kafka.UnitTests/Microsoft.Azure.WebJobs.Extensions.Kafka.UnitTests.csproj
                test/Microsoft.Azure.WebJobs.Extensions.Kafka.EndToEndTests/Microsoft.Azure.WebJobs.Extensions.Kafka.EndToEndTests.csproj
                test/Microsoft.Azure.WebJobs.Extensions.Kafka.LangEndToEndTests/Microsoft.Azure.WebJobs.Extensions.Kafka.LangEndToEndTests.csproj

          - task: DotNetCoreCLI@2
            displayName: Run unit tests
            inputs:
              command: test
              projects: ./test/Microsoft.Azure.WebJobs.Extensions.Kafka.UnitTests

          # - task: Bash@3
          #   displayName: Start Kafka in single node
          #   inputs:
          #     targetType: filePath
          #     filePath: ./test/Microsoft.Azure.WebJobs.Extensions.Kafka.EndToEndTests/start-kafka-test-environment.sh
          #     workingDirectory: test/Microsoft.Azure.WebJobs.Extensions.Kafka.EndToEndTests
          
          - task: DockerCompose@1
            displayName: Start Kafka in single node
            inputs:
              containerType: 'inline'
              inlineScript: |
                docker-compose -f test/Microsoft.Azure.WebJobs.Extensions.Kafka.EndToEndTests/docker-compose.yml up -d
          
          - task: DotNetCoreCLI@2
            displayName: Run e2e tests
            inputs:
              command: test
              projects: ./test/Microsoft.Azure.WebJobs.Extensions.Kafka.EndToEndTests

          # - task: Bash@3
          #   displayName: Stop Kafka in single node
          #   inputs:
          #     targetType: filePath
          #     filePath: ./test/Microsoft.Azure.WebJobs.Extensions.Kafka.EndToEndTests/stop-kafka-test-environment.sh
          #     workingDirectory: test/Microsoft.Azure.WebJobs.Extensions.Kafka.EndToEndTests

          - task: DockerCompose@1
            displayName: Stop Kafka in single node
            inputs:
              containerType: 'inline'
              inlineScript: |
                docker-compose -f test/Microsoft.Azure.WebJobs.Extensions.Kafka.EndToEndTests/docker-compose.yml down
          
          - task: DotNetCoreCLI@2
            displayName: Pack NuGet package
            inputs:
              command: pack
              packDirectory: '$(Build.ArtifactStagingDirectory)'
              searchPatternPack: src/Microsoft.Azure.WebJobs.Extensions.Kafka/Microsoft.Azure.WebJobs.Extensions.Kafka.csproj
              configurationToPack: Release
              includesymbols: true
