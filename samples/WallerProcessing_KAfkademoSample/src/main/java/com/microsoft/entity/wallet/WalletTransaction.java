/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.microsoft.entity.wallet;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class WalletTransaction extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 784203461711955449L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WalletTransaction\",\"namespace\":\"com.microsoft.entity.wallet\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"double\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"payoutId\",\"type\":\"string\"},{\"name\":\"payoutStatus\",\"type\":\"string\"},{\"name\":\"currency\",\"type\":\"string\"},{\"name\":\"fee\",\"type\":\"double\"},{\"name\":\"sourceId\",\"type\":\"string\"},{\"name\":\"sourceType\",\"type\":\"string\"},{\"name\":\"processedAt\",\"type\":\"string\"},{\"name\":\"customerId\",\"type\":\"string\"},{\"name\":\"walletId\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<WalletTransaction> ENCODER =
      new BinaryMessageEncoder<WalletTransaction>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<WalletTransaction> DECODER =
      new BinaryMessageDecoder<WalletTransaction>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<WalletTransaction> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<WalletTransaction> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<WalletTransaction> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<WalletTransaction>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this WalletTransaction to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a WalletTransaction from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a WalletTransaction instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static WalletTransaction fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private CharSequence id;
   private double amount;
   private CharSequence type;
   private CharSequence payoutId;
   private CharSequence payoutStatus;
   private CharSequence currency;
   private double fee;
   private CharSequence sourceId;
   private CharSequence sourceType;
   private CharSequence processedAt;
   private CharSequence customerId;
   private CharSequence walletId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WalletTransaction() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param amount The new value for amount
   * @param type The new value for type
   * @param payoutId The new value for payoutId
   * @param payoutStatus The new value for payoutStatus
   * @param currency The new value for currency
   * @param fee The new value for fee
   * @param sourceId The new value for sourceId
   * @param sourceType The new value for sourceType
   * @param processedAt The new value for processedAt
   * @param customerId The new value for customerId
   * @param walletId The new value for walletId
   */
  public WalletTransaction(CharSequence id, Double amount, CharSequence type, CharSequence payoutId, CharSequence payoutStatus, CharSequence currency, Double fee, CharSequence sourceId, CharSequence sourceType, CharSequence processedAt, CharSequence customerId, CharSequence walletId) {
    this.id = id;
    this.amount = amount;
    this.type = type;
    this.payoutId = payoutId;
    this.payoutStatus = payoutStatus;
    this.currency = currency;
    this.fee = fee;
    this.sourceId = sourceId;
    this.sourceType = sourceType;
    this.processedAt = processedAt;
    this.customerId = customerId;
    this.walletId = walletId;
  }

  public SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return amount;
    case 2: return type;
    case 3: return payoutId;
    case 4: return payoutStatus;
    case 5: return currency;
    case 6: return fee;
    case 7: return sourceId;
    case 8: return sourceType;
    case 9: return processedAt;
    case 10: return customerId;
    case 11: return walletId;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: id = (CharSequence)value$; break;
    case 1: amount = (Double)value$; break;
    case 2: type = (CharSequence)value$; break;
    case 3: payoutId = (CharSequence)value$; break;
    case 4: payoutStatus = (CharSequence)value$; break;
    case 5: currency = (CharSequence)value$; break;
    case 6: fee = (Double)value$; break;
    case 7: sourceId = (CharSequence)value$; break;
    case 8: sourceType = (CharSequence)value$; break;
    case 9: processedAt = (CharSequence)value$; break;
    case 10: customerId = (CharSequence)value$; break;
    case 11: walletId = (CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public double getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(double value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'payoutId' field.
   * @return The value of the 'payoutId' field.
   */
  public CharSequence getPayoutId() {
    return payoutId;
  }


  /**
   * Sets the value of the 'payoutId' field.
   * @param value the value to set.
   */
  public void setPayoutId(CharSequence value) {
    this.payoutId = value;
  }

  /**
   * Gets the value of the 'payoutStatus' field.
   * @return The value of the 'payoutStatus' field.
   */
  public CharSequence getPayoutStatus() {
    return payoutStatus;
  }


  /**
   * Sets the value of the 'payoutStatus' field.
   * @param value the value to set.
   */
  public void setPayoutStatus(CharSequence value) {
    this.payoutStatus = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * @return The value of the 'currency' field.
   */
  public CharSequence getCurrency() {
    return currency;
  }


  /**
   * Sets the value of the 'currency' field.
   * @param value the value to set.
   */
  public void setCurrency(CharSequence value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'fee' field.
   * @return The value of the 'fee' field.
   */
  public double getFee() {
    return fee;
  }


  /**
   * Sets the value of the 'fee' field.
   * @param value the value to set.
   */
  public void setFee(double value) {
    this.fee = value;
  }

  /**
   * Gets the value of the 'sourceId' field.
   * @return The value of the 'sourceId' field.
   */
  public CharSequence getSourceId() {
    return sourceId;
  }


  /**
   * Sets the value of the 'sourceId' field.
   * @param value the value to set.
   */
  public void setSourceId(CharSequence value) {
    this.sourceId = value;
  }

  /**
   * Gets the value of the 'sourceType' field.
   * @return The value of the 'sourceType' field.
   */
  public CharSequence getSourceType() {
    return sourceType;
  }


  /**
   * Sets the value of the 'sourceType' field.
   * @param value the value to set.
   */
  public void setSourceType(CharSequence value) {
    this.sourceType = value;
  }

  /**
   * Gets the value of the 'processedAt' field.
   * @return The value of the 'processedAt' field.
   */
  public CharSequence getProcessedAt() {
    return processedAt;
  }


  /**
   * Sets the value of the 'processedAt' field.
   * @param value the value to set.
   */
  public void setProcessedAt(CharSequence value) {
    this.processedAt = value;
  }

  /**
   * Gets the value of the 'customerId' field.
   * @return The value of the 'customerId' field.
   */
  public CharSequence getCustomerId() {
    return customerId;
  }


  /**
   * Sets the value of the 'customerId' field.
   * @param value the value to set.
   */
  public void setCustomerId(CharSequence value) {
    this.customerId = value;
  }

  /**
   * Gets the value of the 'walletId' field.
   * @return The value of the 'walletId' field.
   */
  public CharSequence getWalletId() {
    return walletId;
  }


  /**
   * Sets the value of the 'walletId' field.
   * @param value the value to set.
   */
  public void setWalletId(CharSequence value) {
    this.walletId = value;
  }

  /**
   * Creates a new WalletTransaction RecordBuilder.
   * @return A new WalletTransaction RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new WalletTransaction RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WalletTransaction RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new WalletTransaction RecordBuilder by copying an existing WalletTransaction instance.
   * @param other The existing instance to copy.
   * @return A new WalletTransaction RecordBuilder
   */
  public static Builder newBuilder(WalletTransaction other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for WalletTransaction instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WalletTransaction>
    implements org.apache.avro.data.RecordBuilder<WalletTransaction> {

    private CharSequence id;
    private double amount;
    private CharSequence type;
    private CharSequence payoutId;
    private CharSequence payoutStatus;
    private CharSequence currency;
    private double fee;
    private CharSequence sourceId;
    private CharSequence sourceType;
    private CharSequence processedAt;
    private CharSequence customerId;
    private CharSequence walletId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.amount)) {
        this.amount = data().deepCopy(fields()[1].schema(), other.amount);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.payoutId)) {
        this.payoutId = data().deepCopy(fields()[3].schema(), other.payoutId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.payoutStatus)) {
        this.payoutStatus = data().deepCopy(fields()[4].schema(), other.payoutStatus);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.currency)) {
        this.currency = data().deepCopy(fields()[5].schema(), other.currency);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.fee)) {
        this.fee = data().deepCopy(fields()[6].schema(), other.fee);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.sourceId)) {
        this.sourceId = data().deepCopy(fields()[7].schema(), other.sourceId);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.sourceType)) {
        this.sourceType = data().deepCopy(fields()[8].schema(), other.sourceType);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.processedAt)) {
        this.processedAt = data().deepCopy(fields()[9].schema(), other.processedAt);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.customerId)) {
        this.customerId = data().deepCopy(fields()[10].schema(), other.customerId);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.walletId)) {
        this.walletId = data().deepCopy(fields()[11].schema(), other.walletId);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
    }

    /**
     * Creates a Builder by copying an existing WalletTransaction instance
     * @param other The existing instance to copy.
     */
    private Builder(WalletTransaction other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.amount)) {
        this.amount = data().deepCopy(fields()[1].schema(), other.amount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.payoutId)) {
        this.payoutId = data().deepCopy(fields()[3].schema(), other.payoutId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.payoutStatus)) {
        this.payoutStatus = data().deepCopy(fields()[4].schema(), other.payoutStatus);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.currency)) {
        this.currency = data().deepCopy(fields()[5].schema(), other.currency);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.fee)) {
        this.fee = data().deepCopy(fields()[6].schema(), other.fee);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.sourceId)) {
        this.sourceId = data().deepCopy(fields()[7].schema(), other.sourceId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.sourceType)) {
        this.sourceType = data().deepCopy(fields()[8].schema(), other.sourceType);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.processedAt)) {
        this.processedAt = data().deepCopy(fields()[9].schema(), other.processedAt);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.customerId)) {
        this.customerId = data().deepCopy(fields()[10].schema(), other.customerId);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.walletId)) {
        this.walletId = data().deepCopy(fields()[11].schema(), other.walletId);
        fieldSetFlags()[11] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public Builder setId(CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public double getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public Builder setAmount(double value) {
      validate(fields()[1], value);
      this.amount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public Builder clearAmount() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public Builder setType(CharSequence value) {
      validate(fields()[2], value);
      this.type = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public Builder clearType() {
      type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'payoutId' field.
      * @return The value.
      */
    public CharSequence getPayoutId() {
      return payoutId;
    }


    /**
      * Sets the value of the 'payoutId' field.
      * @param value The value of 'payoutId'.
      * @return This builder.
      */
    public Builder setPayoutId(CharSequence value) {
      validate(fields()[3], value);
      this.payoutId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'payoutId' field has been set.
      * @return True if the 'payoutId' field has been set, false otherwise.
      */
    public boolean hasPayoutId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'payoutId' field.
      * @return This builder.
      */
    public Builder clearPayoutId() {
      payoutId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'payoutStatus' field.
      * @return The value.
      */
    public CharSequence getPayoutStatus() {
      return payoutStatus;
    }


    /**
      * Sets the value of the 'payoutStatus' field.
      * @param value The value of 'payoutStatus'.
      * @return This builder.
      */
    public Builder setPayoutStatus(CharSequence value) {
      validate(fields()[4], value);
      this.payoutStatus = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'payoutStatus' field has been set.
      * @return True if the 'payoutStatus' field has been set, false otherwise.
      */
    public boolean hasPayoutStatus() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'payoutStatus' field.
      * @return This builder.
      */
    public Builder clearPayoutStatus() {
      payoutStatus = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency' field.
      * @return The value.
      */
    public CharSequence getCurrency() {
      return currency;
    }


    /**
      * Sets the value of the 'currency' field.
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public Builder setCurrency(CharSequence value) {
      validate(fields()[5], value);
      this.currency = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'currency' field.
      * @return This builder.
      */
    public Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'fee' field.
      * @return The value.
      */
    public double getFee() {
      return fee;
    }


    /**
      * Sets the value of the 'fee' field.
      * @param value The value of 'fee'.
      * @return This builder.
      */
    public Builder setFee(double value) {
      validate(fields()[6], value);
      this.fee = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'fee' field has been set.
      * @return True if the 'fee' field has been set, false otherwise.
      */
    public boolean hasFee() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'fee' field.
      * @return This builder.
      */
    public Builder clearFee() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'sourceId' field.
      * @return The value.
      */
    public CharSequence getSourceId() {
      return sourceId;
    }


    /**
      * Sets the value of the 'sourceId' field.
      * @param value The value of 'sourceId'.
      * @return This builder.
      */
    public Builder setSourceId(CharSequence value) {
      validate(fields()[7], value);
      this.sourceId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceId' field has been set.
      * @return True if the 'sourceId' field has been set, false otherwise.
      */
    public boolean hasSourceId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'sourceId' field.
      * @return This builder.
      */
    public Builder clearSourceId() {
      sourceId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'sourceType' field.
      * @return The value.
      */
    public CharSequence getSourceType() {
      return sourceType;
    }


    /**
      * Sets the value of the 'sourceType' field.
      * @param value The value of 'sourceType'.
      * @return This builder.
      */
    public Builder setSourceType(CharSequence value) {
      validate(fields()[8], value);
      this.sourceType = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceType' field has been set.
      * @return True if the 'sourceType' field has been set, false otherwise.
      */
    public boolean hasSourceType() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'sourceType' field.
      * @return This builder.
      */
    public Builder clearSourceType() {
      sourceType = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'processedAt' field.
      * @return The value.
      */
    public CharSequence getProcessedAt() {
      return processedAt;
    }


    /**
      * Sets the value of the 'processedAt' field.
      * @param value The value of 'processedAt'.
      * @return This builder.
      */
    public Builder setProcessedAt(CharSequence value) {
      validate(fields()[9], value);
      this.processedAt = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'processedAt' field has been set.
      * @return True if the 'processedAt' field has been set, false otherwise.
      */
    public boolean hasProcessedAt() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'processedAt' field.
      * @return This builder.
      */
    public Builder clearProcessedAt() {
      processedAt = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerId' field.
      * @return The value.
      */
    public CharSequence getCustomerId() {
      return customerId;
    }


    /**
      * Sets the value of the 'customerId' field.
      * @param value The value of 'customerId'.
      * @return This builder.
      */
    public Builder setCustomerId(CharSequence value) {
      validate(fields()[10], value);
      this.customerId = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'customerId' field has been set.
      * @return True if the 'customerId' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'customerId' field.
      * @return This builder.
      */
    public Builder clearCustomerId() {
      customerId = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'walletId' field.
      * @return The value.
      */
    public CharSequence getWalletId() {
      return walletId;
    }


    /**
      * Sets the value of the 'walletId' field.
      * @param value The value of 'walletId'.
      * @return This builder.
      */
    public Builder setWalletId(CharSequence value) {
      validate(fields()[11], value);
      this.walletId = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'walletId' field has been set.
      * @return True if the 'walletId' field has been set, false otherwise.
      */
    public boolean hasWalletId() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'walletId' field.
      * @return This builder.
      */
    public Builder clearWalletId() {
      walletId = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public WalletTransaction build() {
      try {
        WalletTransaction record = new WalletTransaction();
        record.id = fieldSetFlags()[0] ? this.id : (CharSequence) defaultValue(fields()[0]);
        record.amount = fieldSetFlags()[1] ? this.amount : (Double) defaultValue(fields()[1]);
        record.type = fieldSetFlags()[2] ? this.type : (CharSequence) defaultValue(fields()[2]);
        record.payoutId = fieldSetFlags()[3] ? this.payoutId : (CharSequence) defaultValue(fields()[3]);
        record.payoutStatus = fieldSetFlags()[4] ? this.payoutStatus : (CharSequence) defaultValue(fields()[4]);
        record.currency = fieldSetFlags()[5] ? this.currency : (CharSequence) defaultValue(fields()[5]);
        record.fee = fieldSetFlags()[6] ? this.fee : (Double) defaultValue(fields()[6]);
        record.sourceId = fieldSetFlags()[7] ? this.sourceId : (CharSequence) defaultValue(fields()[7]);
        record.sourceType = fieldSetFlags()[8] ? this.sourceType : (CharSequence) defaultValue(fields()[8]);
        record.processedAt = fieldSetFlags()[9] ? this.processedAt : (CharSequence) defaultValue(fields()[9]);
        record.customerId = fieldSetFlags()[10] ? this.customerId : (CharSequence) defaultValue(fields()[10]);
        record.walletId = fieldSetFlags()[11] ? this.walletId : (CharSequence) defaultValue(fields()[11]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<WalletTransaction>
    WRITER$ = (org.apache.avro.io.DatumWriter<WalletTransaction>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<WalletTransaction>
    READER$ = (org.apache.avro.io.DatumReader<WalletTransaction>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id);

    out.writeDouble(this.amount);

    out.writeString(this.type);

    out.writeString(this.payoutId);

    out.writeString(this.payoutStatus);

    out.writeString(this.currency);

    out.writeDouble(this.fee);

    out.writeString(this.sourceId);

    out.writeString(this.sourceType);

    out.writeString(this.processedAt);

    out.writeString(this.customerId);

    out.writeString(this.walletId);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);

      this.amount = in.readDouble();

      this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);

      this.payoutId = in.readString(this.payoutId instanceof Utf8 ? (Utf8)this.payoutId : null);

      this.payoutStatus = in.readString(this.payoutStatus instanceof Utf8 ? (Utf8)this.payoutStatus : null);

      this.currency = in.readString(this.currency instanceof Utf8 ? (Utf8)this.currency : null);

      this.fee = in.readDouble();

      this.sourceId = in.readString(this.sourceId instanceof Utf8 ? (Utf8)this.sourceId : null);

      this.sourceType = in.readString(this.sourceType instanceof Utf8 ? (Utf8)this.sourceType : null);

      this.processedAt = in.readString(this.processedAt instanceof Utf8 ? (Utf8)this.processedAt : null);

      this.customerId = in.readString(this.customerId instanceof Utf8 ? (Utf8)this.customerId : null);

      this.walletId = in.readString(this.walletId instanceof Utf8 ? (Utf8)this.walletId : null);

    } else {
      for (int i = 0; i < 12; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          break;

        case 1:
          this.amount = in.readDouble();
          break;

        case 2:
          this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
          break;

        case 3:
          this.payoutId = in.readString(this.payoutId instanceof Utf8 ? (Utf8)this.payoutId : null);
          break;

        case 4:
          this.payoutStatus = in.readString(this.payoutStatus instanceof Utf8 ? (Utf8)this.payoutStatus : null);
          break;

        case 5:
          this.currency = in.readString(this.currency instanceof Utf8 ? (Utf8)this.currency : null);
          break;

        case 6:
          this.fee = in.readDouble();
          break;

        case 7:
          this.sourceId = in.readString(this.sourceId instanceof Utf8 ? (Utf8)this.sourceId : null);
          break;

        case 8:
          this.sourceType = in.readString(this.sourceType instanceof Utf8 ? (Utf8)this.sourceType : null);
          break;

        case 9:
          this.processedAt = in.readString(this.processedAt instanceof Utf8 ? (Utf8)this.processedAt : null);
          break;

        case 10:
          this.customerId = in.readString(this.customerId instanceof Utf8 ? (Utf8)this.customerId : null);
          break;

        case 11:
          this.walletId = in.readString(this.walletId instanceof Utf8 ? (Utf8)this.walletId : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










